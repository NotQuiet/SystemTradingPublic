import json
from datetime import datetime
from binance.client import Client
from binance.error import ClientError
from Scripts.DecisionTree.Transactions.Transaction import Transaction
from Scripts.Managers.TelegramBotManager import TelegramBotManager

class TransactionManager:
    def __init__(self, cm_client: Client, transaction_file='transactions.json'):
        self.transactions = []
        self.transaction_file = transaction_file
        self.client = cm_client
        self.load_transactions()
        self.telegram_bot_manager = TelegramBotManager()

    async def open_position(self, symbol, interval, direction):
        existing_transaction = self.get_active_transaction_by_symbol_and_interval(symbol, interval)
        if existing_transaction:
            print(f"–°–¥–µ–ª–∫–∞ –ø–æ {symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ {interval} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏.")
            return

        try:
            price_data = self.client.futures_mark_price(symbol=symbol)
            entry_price = float(price_data['markPrice'])
        except ClientError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return

        if direction == "long":
            stop_loss = entry_price * (1 - 0.001)
        elif direction == "short":
            stop_loss = entry_price * (1 + 0.001)
        else:
            print(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {direction}")
            return

        transaction = Transaction(symbol, entry_price, direction, stop_loss, take_profit=None, interval=interval)

        transaction.highest_price = entry_price if direction == "long" else None
        transaction.lowest_price = entry_price if direction == "short" else None

        self.transactions.append(transaction)
        self.save_transactions()

        await self.open_order_on_binance(symbol, entry_price, direction)

        await self.send_transaction_notification(transaction, "üöÄ –û—Ç–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞")

    async def close_position(self, symbol, interval):
        transaction = self.get_active_transaction_by_symbol_and_interval(symbol, interval)
        if not transaction:
            return

        try:
            price_data = self.client.futures_mark_price(symbol=symbol)
            exit_price = float(price_data['markPrice'])
        except ClientError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        transaction.exit_price = exit_price
        transaction.active = False

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        self.calculate_profit_loss(transaction)
        self.save_transactions()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ Binance
        await self.close_order_on_binance(symbol, exit_price, transaction.direction)

        await self.send_transaction_notification(transaction, "üíº –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞")

    def get_active_transaction_by_symbol_and_interval(self, symbol, interval):
        for transaction in self.transactions:
            if transaction.symbol == symbol and transaction.interval == interval and transaction.active:
                return transaction
        return None

    def calculate_profit_loss(self, transaction):
        if transaction.exit_price is not None:
            if transaction.direction == "long":
                transaction.profit_loss_percentage = (
                    ((transaction.exit_price - transaction.entry_price) / transaction.entry_price) * 100)
            elif transaction.direction == "short":
                transaction.profit_loss_percentage = (
                    ((transaction.entry_price - transaction.exit_price) / transaction.entry_price) * 100)

    async def open_order_on_binance(self, symbol, price, direction, quantity=None):
        order_side = 'BUY' if direction == "long" else 'SELL'

        try:
            symbol = symbol.upper()
            precision_info = self.get_symbol_precision(symbol)
            if precision_info is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

            quantity_precision = precision_info['quantity_precision']

            min_notional = 20.0

            if quantity is None:
                quantity = min_notional / price
            else:
                quantity = float(quantity)

            quantity = round(quantity, quantity_precision)

            notional = quantity * price

            if notional < min_notional:
                quantity += 10 ** (-quantity_precision)
                quantity = round(quantity, quantity_precision)
                notional = quantity * price

                if notional < min_notional:
                    print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {symbol}, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {min_notional} USDT.")
                    return

            if quantity <= 0:
                print(f"–û—à–∏–±–∫–∞: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {symbol} –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0 ({quantity}). –û—Ä–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω.")
                return

            order = self.client.futures_create_order(
                symbol=symbol,
                side=order_side,
                type='MARKET',  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                quantity=quantity
            )
            print(f"–û—Ç–∫—Ä—ã—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {order_side} {symbol} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}")
            await self.send_default_telegram_notification(
                f"–û—Ç–∫—Ä—ã—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {order_side} {symbol} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}")

        except ClientError as e:
            await self.send_default_telegram_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞ {symbol}: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")

    async def close_order_on_binance(self, symbol, price, direction):
        order_side = 'SELL' if direction == "long" else 'BUY'

        try:
            precision_info = self.get_symbol_precision(symbol)
            if precision_info is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")

            quantity_precision = precision_info['quantity_precision']

            positions = self.client.futures_position_information(symbol=symbol)

            quantity = 0
            for position in positions:
                if position['symbol'] == symbol:
                    quantity = abs(float(position['positionAmt']))
                    break

            if quantity > 0:
                quantity = round(quantity, quantity_precision)

                order = self.client.futures_create_order(
                    symbol=symbol,
                    side=order_side,
                    type='MARKET',  # –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä
                    quantity=quantity
                )
                print(f"–ó–∞–∫—Ä—ã—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {order_side} {symbol} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}")
                await self.send_default_telegram_notification(
                    f"–ó–∞–∫—Ä—ã—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ {order_side} {symbol} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {quantity}")
            else:
                print(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ {symbol}.")
                await self.send_default_telegram_notification(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ {symbol}")

        except ClientError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            await self.send_default_telegram_notification(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")

    async def monitor_transactions(self, current_prices, interval):
        for transaction in self.transactions:
            if transaction.active and transaction.interval == interval:
                symbol = transaction.symbol
                current_price = current_prices.get(symbol)
                if current_price is None:
                    continue

                print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {symbol}: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_price}, —Å—Ç–æ–ø-–ª–æ—Å—Å {transaction.stop_loss}")

                if transaction.direction == "long":
                    if current_price > (transaction.highest_price or transaction.entry_price):
                        transaction.highest_price = current_price
                        transaction.stop_loss = current_price * (1 - 0.001)
                        print(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: {transaction.stop_loss}")
                        self.save_transactions()
                    elif current_price <= transaction.stop_loss:
                        print(f"–¶–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è {symbol}. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É.")
                        await self.close_position(symbol, transaction.interval)

                elif transaction.direction == "short":
                    if current_price < (transaction.lowest_price or transaction.entry_price):
                        transaction.lowest_price = current_price
                        transaction.stop_loss = current_price * (1 + 0.001)
                        print(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –¥–ª—è {symbol}: {transaction.stop_loss}")
                        self.save_transactions()
                    elif current_price >= transaction.stop_loss:
                        print(f"–¶–µ–Ω–∞ –ø–æ–¥–Ω—è–ª–∞—Å—å –≤—ã—à–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è {symbol}. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É.")
                        await self.close_position(symbol, transaction.interval)

    def get_symbol_precision(self, symbol):
        exchange_info = self.client.futures_exchange_info()
        for symbol_info in exchange_info['symbols']:
            if symbol_info['symbol'] == symbol:
                return {
                    'price_precision': symbol_info['pricePrecision'],
                    'quantity_precision': symbol_info['quantityPrecision']
                }
        return None

    def save_transactions(self):
        with open(self.transaction_file, 'w') as f:
            transactions_data = []
            for transaction in self.transactions:
                transaction_data = transaction.__dict__.copy()
                if isinstance(transaction_data.get('created_at'), datetime):
                    transaction_data['created_at'] = transaction_data['created_at'].isoformat()
                if isinstance(transaction_data.get('updated_at'), datetime):
                    transaction_data['updated_at'] = transaction_data['updated_at'].isoformat()
                transactions_data.append(transaction_data)
            json.dump(transactions_data, f, indent=4)

    def load_transactions(self):
        try:
            with open(self.transaction_file, 'r') as f:
                transaction_dicts = json.load(f)
                for transaction_dict in transaction_dicts:
                    if 'created_at' in transaction_dict and transaction_dict['created_at']:
                        transaction_dict['created_at'] = datetime.fromisoformat(transaction_dict['created_at'])
                    if 'updated_at' in transaction_dict and transaction_dict['updated_at']:
                        transaction_dict['updated_at'] = datetime.fromisoformat(transaction_dict['updated_at'])
                    transaction = Transaction(
                        transaction_dict['symbol'],
                        transaction_dict['entry_price'],
                        transaction_dict['direction'],
                        transaction_dict['stop_loss'],
                        transaction_dict.get('take_profit'),
                        transaction_dict.get('interval')
                    )
                    transaction.id = transaction_dict['id']
                    transaction.exit_price = transaction_dict['exit_price']
                    transaction.profit_loss_percentage = transaction_dict['profit_loss_percentage']
                    transaction.active = transaction_dict['active']
                    transaction.highest_price = transaction_dict.get('highest_price')
                    transaction.lowest_price = transaction_dict.get('lowest_price')
                    self.transactions.append(transaction)
        except FileNotFoundError:
            self.transactions = []

    async def send_transaction_notification(self, transaction, message_prefix):
        profit_loss_info = f"{transaction.profit_loss_percentage:.2f}%" if transaction.profit_loss_percentage is not None else "–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ"
        message = (f"{message_prefix} –¥–ª—è {transaction.symbol}:\n"
                   f"–¢–∏–ø —Å–¥–µ–ª–∫–∏: {transaction.direction.upper()}\n"
                   f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {transaction.entry_price}\n"
                   f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {transaction.exit_price if transaction.exit_price else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n"
                   f"–ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: {profit_loss_info}\n"
                   f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {transaction.interval}")

        print(message)

    async def send_default_telegram_notification(self, message):
        return
